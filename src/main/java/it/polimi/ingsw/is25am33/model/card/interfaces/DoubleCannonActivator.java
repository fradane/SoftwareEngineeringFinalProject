package it.polimi.ingsw.is25am33.model.card.interfaces;

import it.polimi.ingsw.is25am33.model.component.BatteryBox;
import it.polimi.ingsw.is25am33.model.component.Cannon;
import it.polimi.ingsw.is25am33.model.game.Player;

import java.util.Collections;
import java.util.List;

public interface DoubleCannonActivator {

    /**
     * Activates the specified double cannons by consuming associated battery units from the provided
     * battery boxes and calculates the total firepower generated by the cannons.
     *
     * @param chosenDoubleCannons the list of double cannons to be activated
     * @param chosenBatteryBoxes the list of battery boxes supplying power to the double cannons
     * @param player the player whose personal board firepower is being updated
     * @return the total firepower generated by the specified double cannons
     * @throws IllegalArgumentException if the number of double cannons does not match the number of battery boxes,
     *                                  or if the number of available batteries is insufficient
     * @throws IllegalStateException if a battery box has no remaining batteries to use
     */
    default double activateDoubleCannonsProcess(List<Cannon> chosenDoubleCannons, List<BatteryBox> chosenBatteryBoxes, Player player) throws IllegalArgumentException, IllegalStateException {

        if (chosenDoubleCannons.size() != chosenBatteryBoxes.size())
            throw new IllegalArgumentException("The number of engines does not match the number of battery boxes");

        chosenBatteryBoxes.stream().distinct().forEach(box -> {
            if (Collections.frequency(chosenDoubleCannons, box) > box.getRemainingBatteries())
                throw new IllegalArgumentException("The number of required batteries is not enough");
        });

        chosenBatteryBoxes.forEach(BatteryBox::useBattery);

        return player.getPersonalBoard().countTotalFirePower(chosenDoubleCannons);

    }

}
